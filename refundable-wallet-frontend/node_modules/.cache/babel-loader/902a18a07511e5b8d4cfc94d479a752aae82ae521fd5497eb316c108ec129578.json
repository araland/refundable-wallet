{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/* eslint-disable max-classes-per-file */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { EventEmitter as EventEmitterAtNode } from 'events';\nconst wrapFunction = fn => params => fn(params.detail);\n/**\n * This class copy the behavior of Node.js EventEmitter class.\n * It is used to provide the same interface for the browser environment.\n */\nclass EventEmitterAtBrowser extends EventTarget {\n  constructor() {\n    super(...arguments);\n    this._listeners = {};\n    this.maxListeners = Number.MAX_SAFE_INTEGER;\n  }\n  on(eventName, fn) {\n    this.addEventListener(eventName, fn);\n    return this;\n  }\n  once(eventName, fn) {\n    const onceCallback = params => __awaiter(this, void 0, void 0, function* () {\n      this.off(eventName, onceCallback);\n      yield fn(params);\n    });\n    return this.on(eventName, onceCallback);\n  }\n  off(eventName, fn) {\n    this.removeEventListener(eventName, fn);\n    return this;\n  }\n  emit(eventName, params) {\n    const event = new CustomEvent(eventName, {\n      detail: params\n    });\n    return super.dispatchEvent(event);\n  }\n  listenerCount(eventName) {\n    const eventListeners = this._listeners[eventName];\n    return eventListeners ? eventListeners.length : 0;\n  }\n  listeners(eventName) {\n    return this._listeners[eventName].map(value => value[0]) || [];\n  }\n  eventNames() {\n    return Object.keys(this._listeners);\n  }\n  removeAllListeners() {\n    Object.keys(this._listeners).forEach(event => {\n      this._listeners[event].forEach(listener => {\n        super.removeEventListener(event, listener[1]);\n      });\n    });\n    this._listeners = {};\n    return this;\n  }\n  setMaxListeners(maxListeners) {\n    this.maxListeners = maxListeners;\n    return this;\n  }\n  getMaxListeners() {\n    return this.maxListeners;\n  }\n  addEventListener(eventName, fn) {\n    const wrappedFn = wrapFunction(fn);\n    super.addEventListener(eventName, wrappedFn);\n    if (!this._listeners[eventName]) {\n      this._listeners[eventName] = [];\n    }\n    this._listeners[eventName].push([fn, wrappedFn]);\n  }\n  removeEventListener(eventName, fn) {\n    const eventListeners = this._listeners[eventName];\n    if (eventListeners) {\n      const index = eventListeners.findIndex(item => item[0] === fn);\n      if (index !== -1) {\n        super.removeEventListener(eventName, eventListeners[index][1]);\n        eventListeners.splice(index, 1);\n      }\n    }\n  }\n}\n// eslint-disable-next-line import/no-mutable-exports\nlet EventEmitterType;\n// Check if the code is running in a Node.js environment\nif (typeof window === 'undefined') {\n  EventEmitterType = EventEmitterAtNode;\n} else {\n  // Fallback for the browser environment\n  EventEmitterType = EventEmitterAtBrowser;\n}\nexport class EventEmitter extends EventEmitterType {}\n//# sourceMappingURL=event_emitter.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}